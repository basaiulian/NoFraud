@page "/register"
@using BlazorPaymentManagementApp.Model
@using System.Timers
@inject NavigationManager NavManager




<EditForm Model="@user" OnValidSubmit="RegisterUser">
    <DataAnnotationsValidator />

    <div class="total-form">

        <h3>Register</h3>
        <div class="form">

            <div class="form-input">
                <InputText id="username" class="form-control" placeholder="Username" @bind-Value="user.Username" />
                <ValidationMessage For="@(() => user.Username)" />
            </div>
        </div>

        <div class="form">

            <div class="form-input">
                <InputText type="password" id="password" class="form-control" placeholder="Password" @bind-Value="user.Password" />
                <ValidationMessage For="@(() => user.Password)" />
            </div>
        </div>

        <div class="form">

            <div class="form-input">
                <InputText id="email" class="form-control" placeholder="Email" @bind-Value="user.Email" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>
        </div>

        <div class="form">

            <div class="form-input">
                <InputText id="phoneNumber" class="form-control" placeholder="PhoneNumber" @bind-Value="user.PhoneNumber" />
                <ValidationMessage For="@(() => user.PhoneNumber)" />
            </div>
        </div>


        <div class="form">
            <div class="form-input">
                <InputText type="password "id="address" class="form-control" placeholder="Address" @bind-Value="user.Address" />
                <ValidationMessage For="@(() => user.Address)" />
            </div>
        </div>

        <input type="submit" value="Submit" />

    </div>
</EditForm>

<p>@message</p>

@code{ 

    private User user = new User();
    string message = "";

    private static Timer aTimer;

    HttpClient httpClient = new HttpClient()
    {
        BaseAddress = new Uri("http://localhost:5000")
    };

    protected async Task RegisterUser()
    {

        HttpResponseMessage response = await httpClient.PostAsJsonAsync<User>("/api/users", user);

        if (response.StatusCode.ToString() == "Created")
        {
            message += " Contul a fost creat cu succes ! ";
        }
        else
        {
            message += " Contul exista deja ! ";
        }

        aTimer = new System.Timers.Timer();
        aTimer.Interval = 3000;

        // Hook up the Elapsed event for the timer. 
        aTimer.Elapsed += (sender, args) =>
        {
            NavManager.NavigateTo("/Login");
        };

        // Have the timer fire repeated events (true is the default)
        aTimer.AutoReset = true;

        // Start the timer
        aTimer.Enabled = true;

    }

    //protected override async Task OnInitializedAsync()
    //{
    //   // users = await httpClient.GetFromJsonAsync<List<User>>("/api/users");
    //}


}

