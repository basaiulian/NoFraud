@page "/register"
@using BlazorPaymentManagementApp.Model
@using System.Timers
@inject NavigationManager NavManager



<h3>Register</h3>

<EditForm Model="@user" OnValidSubmit="RegisterUser">
    <DataAnnotationsValidator />
    <hr />

    <div class="form-group row">
        <label for="username" class="col-sm-2 col-form-label">
            Username
        </label>
        <div class="col-sm-10">
            <InputText id="balance" class="form-control" placeholder="Username" @bind-Value="user.Username" />
            <ValidationMessage For="@(() => user.Username)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="password" class="col-sm-2 col-form-label">
            Password
        </label>
        <div class="col-sm-10">
            <InputText id="password" class="form-control" placeholder="Password" @bind-Value="user.Password" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="password" class="col-sm-2 col-form-label">
            Email
        </label>
        <div class="col-sm-10">
            <InputText id="password" class="form-control" placeholder="Email" @bind-Value="user.Email" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="password" class="col-sm-2 col-form-label">
            PhoneNumber
        </label>
        <div class="col-sm-10">
            <InputText id="password" class="form-control" placeholder="PhoneNumber" @bind-Value="user.PhoneNumber" />
            <ValidationMessage For="@(() => user.PhoneNumber)" />
        </div>
    </div>


    <div class="form-group row">
        <label for="password" class="col-sm-2 col-form-label">
            Address
        </label>
        <div class="col-sm-10">
            <InputText id="password" class="form-control" placeholder="Address" @bind-Value="user.Address" />
            <ValidationMessage For="@(() => user.Address)" />
        </div>
    </div>
    <hr />

    <input type="submit" value="Register" />
</EditForm>

<p>@message</p>

@code{ 

    private User user = new User();
    string message = "";

    private static Timer aTimer;

    HttpClient httpClient = new HttpClient()
    {
        BaseAddress = new Uri("http://localhost:5000")
    };

    protected async Task RegisterUser()
    {

        HttpResponseMessage response = await httpClient.PostAsJsonAsync<User>("/api/users", user);

        if (response.StatusCode.ToString() == "Created")
        {
            message += " Contul a fost creat cu succes ! ";
        }
        else
        {
            message += " Contul exista deja ! ";
        }

        aTimer = new System.Timers.Timer();
        aTimer.Interval = 3000;

        // Hook up the Elapsed event for the timer. 
        aTimer.Elapsed += (sender, args) =>
        {
            NavManager.NavigateTo("/Login");
        };

        // Have the timer fire repeated events (true is the default)
        aTimer.AutoReset = true;

        // Start the timer
        aTimer.Enabled = true;

    }

    //protected override async Task OnInitializedAsync()
    //{
    //   // users = await httpClient.GetFromJsonAsync<List<User>>("/api/users");
    //}


}

