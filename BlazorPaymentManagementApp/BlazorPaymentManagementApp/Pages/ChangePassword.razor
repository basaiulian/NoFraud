@page "/changepassword"
@layout LoginLayout
@using BlazorPaymentManagementApp.Model
@using System.Timers
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css">

<div class="register-photo">
    <div class="form-container">
        <div class="image-holder"></div>
        <form method="post">
            <EditForm Model="@user" OnValidSubmit="ChangeUserPassword">
                <h2 class="text-center"><strong>Change your password</strong></h2>
                <div class="form-group" style="display:inline-flex">
                    <InputText type="@showType" id="password" class="form-control" placeholder="Password" @bind-Value="password" />
                </div>
                <i class="far fa-eye" @onclick="() => showPassword()"></i>
                <div class="form-group" style="display:inline-flex">
                    <InputText type="@showTypeConffirm" id="password" class="form-control" placeholder="Confirm Password" @bind-Value="confirmPassword" />
                </div>
                <i class="far fa-eye" @onclick="() => showPassword2()"></i>
                <div class="form-group">
                    <input class="btn btn-success btn-block" type="submit" value="Submit"><a class="already" @onclick="GoToProfile"> Go to profile !</a>
                </div>
            </EditForm>
        </form>
    </div>
    <h3>@message3</h3>
    <h4>@message4</h4>
</div>

@code{
    private List<User> users;

    private string showType = "password";
    private string showTypeConffirm = "password";

    private static Timer aTimer;

    private string localId { get; set; }

    private string message4 = "";
    private string message3 = "";

    private User user = new User();
    private string username { get; set; }
    private string password { get; set; }
    private string confirmPassword { get; set; }

    HttpClient httpClient = new HttpClient()
    {
        BaseAddress = new Uri("http://localhost:5000")
    };

    protected async void GoToProfile()
    {
        NavManager.NavigateTo("users/" + localId);
    }

    private void showPassword()
    {
        if (showType == "password")
        {
            showType = "text";
        }
        else if (showType == "text")
        {
            showType = "password";
        }
    }

    private void showPassword2()
    {
        if (showTypeConffirm == "password")
        {
            showTypeConffirm = "text";
        }
        else if (showTypeConffirm == "text")
        {
            showTypeConffirm = "password";
        }
    }

    protected async Task ChangeUserPassword()
    {

        user = await httpClient.GetFromJsonAsync<User>("/api/v1/users/" + localId);

        User user2 = new User();

        if (confirmPassword != null && password != null)
        {

            if (confirmPassword == password)
            {
                message4 = "";
                message3 = "Password changed successfully, you will be redirected to your profile in 3 seconds...";

                user2.Id = user.Id;
                user2.Username = user.Username;
                user2.Password = confirmPassword;
                user2.Email = user.Email;
                user2.PhoneNumber = user.PhoneNumber;
                user2.Address = user.Address;

                await httpClient.PutAsJsonAsync<User>("/api/v1/users/" + localId, user2);

                aTimer = new Timer();
                aTimer.Interval = 3000;
                aTimer.Elapsed += (sender, args) =>
                {
                    NavManager.NavigateTo("/users/" + localId, true);
                };

                aTimer.AutoReset = true;
                aTimer.Enabled = true;

            }
            else
            {
                message4 = "";
                message4 = "Your password and confirmation password do not match,check it !";
            }
        }
        else
        {
            message4 = "The password specified is invalid !";
        }

    }

    protected override async Task OnInitializedAsync()
    {
        localId = await localStorage.GetItemAsStringAsync("id");
        users = await httpClient.GetFromJsonAsync<List<User>>("/api/v1/users");

    }
}
