@page "/createbankaccount"
@layout CardLayout
@using System.Timers
@using System.ComponentModel.DataAnnotations
@using BlazorPaymentManagementApp.Model
@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@inject IJSRuntime JsRuntime

<div class="register-photo">
    <div class="form-container">
        <div class="image-holder"></div>
        <form method="post">
            <EditForm Model="@bankAccount" OnValidSubmit="Create">
                <DataAnnotationsValidator />
                <h2 class="text-center"><strong>Bank Account </strong> </h2>
                <div class="form-group">
                    <InputText id="balance" class="form-control" placeholder="Balance" @bind-Value="BalanceToSend" />
                    <ValidationMessage For="@(() => BalanceToSend)" />
                </div>
                <div class="form-group">
                    <InputText id="name" class="form-control" placeholder="Name" @bind-Value="bankAccount.BankName" />
                    <ValidationMessage For="@(() => bankAccount.BankName)" />
                </div>
                <div class="form-group">
                    <InputSelect id="accountType" class="form-control" @bind-Value="AccountTypeToSend">
                        <option>Student(Default)</option>
                        @foreach (var accountType in accountTypes)
                        {
                            @if (accountType != "Student")
                            {
                                <option>@accountType</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => bankAccount.AccountType)" />
                </div>
                <div class="form-group">
                    <input class="btn btn-success btn-block" type="submit" value="Submit" />
                </div>
            </EditForm>
        </form>
    </div>
    <h3>@goodMessage</h3>
    <h4>@badNessage</h4>
</div>

@code{ private BankAccount bankAccount = new BankAccount();

    private List<BankAccount> bankAccounts = new List<BankAccount>();

    private List<string> accountTypes = new List<string>();

    private static Timer aTimer;
    private string goodMessage = "";
    private string badNessage = "";

    [Required(AllowEmptyStrings = false, ErrorMessage = "The Balance field is required.")]
    [RegularExpression(@"^[0-9]+[.][0-9]+|[0-9]+$", ErrorMessage = "Balance must be like \"40\" or \"40.5\".")]
    public string BalanceToSend { get; set; }

    public string UserIdToSend { get; set; }

    public string AccountTypeToSend { get; set; }
    HttpClient httpClient = new HttpClient()
    {
        BaseAddress = new Uri("http://localhost:5000")
    };

    protected async Task<string> GenerateId(int length)
    {
        string cypher = "123456789";

        var random = new Random();

        string generatedId = "";

        for (int i = 0; i < length; i++)
        {
            generatedId += cypher[random.Next(cypher.Length)];
        }

        return generatedId;
    }

    protected async Task Create()
    {
        bankAccount.Balance = Double.Parse(BalanceToSend);
        var id = await localStorage.GetItemAsync<string>("id");
        bankAccount.UserId = Int32.Parse(id);
        bankAccount.Id = await GenerateId(16);

        if (AccountTypeToSend == null)
        {
            bankAccount.AccountType = "Student";
        }
        else
        {
            bankAccount.AccountType = AccountTypeToSend;
        }

        HttpResponseMessage response = await httpClient.PostAsJsonAsync<BankAccount>("/api/v1/bankaccounts", bankAccount);

        if (response.StatusCode.ToString() == "Created")
        {
            goodMessage = "";
            badNessage = "";
            badNessage += "Bank account added successfully, you will be redirected to your profile in 3 seconds...";

            aTimer = new Timer();
            aTimer.Interval = 3000;
            aTimer.Elapsed += (sender, args) =>
            {
                NavManager.NavigateTo("users/" + bankAccount.UserId,true);
            };

            aTimer.AutoReset = true;
            aTimer.Enabled = true;

        }
        else
        {
            goodMessage = "";
            goodMessage += "Something is wrong, try again! ";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        bankAccounts = await httpClient.GetFromJsonAsync<List<BankAccount>>("/api/v1/bankaccounts");
        foreach (var bankAccount in bankAccounts)
        {
            if (!accountTypes.Contains(bankAccount.AccountType))
            {
                accountTypes.Add(bankAccount.AccountType);
            }
        }
    } }