@page "/users/{id}"
@layout CardLayout
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using BlazorPaymentManagementApp.Model
@using System.Timers
@inject NavigationManager NavManager

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@if (Id != localId && localId != null)
{
    NavManager.NavigateTo("/error");
}
else
{
    <div>
        @if (user == null)
        {
            <p>Loading...</p>
        }
        else
        {<div class="register-photo">
                <div class="form-container">
                    <div class="image-holder"></div>
                    <form method="post">

                        <h2 class="text-center"><strong>My Profile </strong> </h2>
                        <h3>Username: @user.Username</h3>
                        <h3>Email: @user.Email</h3>
                        <h3>Phone Number: @user.PhoneNumber</h3>
                        <h3>Address: @user.Address</h3>
                        <h3><a href="/changepassword">Change your password</a></h3>

                    </form>

                </div>
                <div class="banks">

                    <h2 class="title"><strong>Bank accounts and credit cards</strong> </h2>

                    @foreach (BankAccount bankAccount in user.BankAccounts)
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Account Type</th>
                                    <th>Balance</th>
                                    <th><button class="deleteButton" @onclick="() => deleteBankAccount(bankAccount.Id)"><i class="fa fa-trash"> Delete</i></button></th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>@bankAccount.BankName</td>
                                    <td>@bankAccount.AccountType</td>
                                    <td>@bankAccount.Balance</td>
                                    <td></td>
                                </tr>
                                <table class="table" style="margin-left:35%">
                                    <thead>
                                        <tr>
                                            <th>Bank Name</th>
                                            <th>CvvCode</th>
                                            <th>PinCode</th>
                                            <th>ExpirationDate</th>
                                            <th>Manage card</th>
                                        </tr>
                                    </thead>
                                    <tbody>

                                        @foreach (Card card in bankAccount.CardList)
                                        {
                                            <tr>
                                                <td>@card.BankName</td>
                                                <td>@card.CvvCode</td>
                                                <td>@card.PinCode</td>
                                                <td>@card.ExpirationDate</td>
                                                <th><button class="deleteButton" @onclick="() => deleteCard(card.Id)"><i class="fa fa-trash"> Delete</i></button></th>
                                            </tr>
                                        }

                                    </tbody>
                                </table>
                            </tbody>
                        </table>}

                </div>
                <div class="banks">
                    <h2 class="title"><strong>Payments</strong> </h2>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Amount</th>
                                <th>Currency</th>
                                <th>Source</th>
                                <th>Destination</th>
                                <th>Date</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payment in userPayments)
                            {
                                @if (payment.IsFraud == "Safe")
                                {
                                    <tr>
                                        <td>@payment.Amount.ToString("F")</td>
                                        <td>@payment.Currency</td>
                                        <td>@payment.Source</td>
                                        <td>@payment.Destination</td>
                                        <td>@payment.Date</td>
                                        <td>@payment.IsFraud</td>
                                    </tr>
                                }
                                else if (payment.IsFraud == "Not Safe")
                                {
                                    <tr style="color:red;">
                                        <td>@payment.Amount.ToString("F")</td>
                                        <td>@payment.Currency</td>
                                        <td>@payment.Source</td>
                                        <td>@payment.Destination</td>
                                        <td>@payment.Date</td>
                                        <td>@payment.IsFraud</td>
                                    </tr>
                                }
                                else
                                {
                        <tr>
                            <td>@payment.Amount.ToString("F")</td>
                            <td>@payment.Currency</td>
                            <td>@payment.Destination</td>
                            <td>@payment.Source</td>
                            <td>@payment.Date</td>
                            <td>@payment.IsFraud</td>
                        </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>


        }
    </div>
}
@code{

    [Parameter]
    public string Id { get; set; }

    public string localId { get; set; }

    public string loggedIn { get; set; }

    private List<Payment> payments;

    private List<Payment> userPayments = new List<Payment>();

    private Payment payment = new Payment();

    private User user = new User();

    private BankAccount bankAccount = new BankAccount();

    HttpClient httpClient = new HttpClient()
    {
        BaseAddress = new Uri("http://localhost:5000")
    };

    protected async void deleteCard(int cardId)
    {
        Console.WriteLine(cardId);
        Console.WriteLine(localId);
        await httpClient.DeleteAsync("/api/v1/cards/" + cardId.ToString());

        Timer aTimer = new Timer();
        aTimer.Interval = 200;

        // Hook up the Elapsed event for the timer.
        aTimer.Elapsed += (sender, args) =>
        {
            NavManager.NavigateTo("/users/" + localId, true);
        };

        // Have the timer fire repeated events (true is the default)
        aTimer.AutoReset = true;

        // Start the timer
        aTimer.Enabled = true;
    }

    protected async void deleteBankAccount(string bankId)
    {
        Console.WriteLine(bankId);
        Console.WriteLine(localId);
        await httpClient.DeleteAsync("/api/v1/bankaccounts/" + bankId);

        Timer aTimer = new Timer();
        aTimer.Interval = 200;

        // Hook up the Elapsed event for the timer.
        aTimer.Elapsed += (sender, args) =>
        {
            NavManager.NavigateTo("/users/" + localId, true);
        };

        // Have the timer fire repeated events (true is the default)
        aTimer.AutoReset = true;

        // Start the timer
        aTimer.Enabled = true;
    }

    protected override async Task OnInitializedAsync()
    {
        localId = await localStorage.GetItemAsStringAsync("id");
        loggedIn = await localStorage.GetItemAsStringAsync("autentificat");
        user = await httpClient.GetFromJsonAsync<User>("/api/v1/users/" + Id);

        payments = await httpClient.GetFromJsonAsync<List<Payment>>("/api/v1/payments");

        user = await httpClient.GetFromJsonAsync<User>("/api/v1/users/" + localId);

        foreach (Payment payment in payments)
        {
            if (payment.Source == user.Username)
            {
                userPayments.Add(payment);
            }
        }

    }
}

