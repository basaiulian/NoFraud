@page "/bankaccounts"
@using BlazorPaymentManagementApp.Model
@using System.ComponentModel.DataAnnotations
@using System.Text.Json

@inject IJSRuntime JsRuntime


<h3>Bank Accounts</h3>

<button @onclick="@ShowForm">Create Bank Account</button>
<p hidden="@IsShown">
    <EditForm Model="@bankAccount" OnValidSubmit="Create">
        <DataAnnotationsValidator />
        <hr />

        <div class="form-group row">
            <label for="balance" class="col-sm-2 col-form-label">
                Balance
            </label>
            <div class="col-sm-10">
                <InputText id="balance" class="form-control" placeholder="Balance" @bind-Value="BalanceToSend" />
                <ValidationMessage For="@(() => BalanceToSend)" />
            </div>
        </div>

        <div class="form-group row">
            <label for="accountType" class="col-sm-2 col-form-label">
                Account Type
            </label>
            <div class="col-sm-10">
                <InputSelect id="accountType" class="form-control" @bind-Value="accountTypes">
                    @foreach(var accountType in accountTypes)
                    {
                        <option>@accountType</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => bankAccount.AccountType)" />
            </div>
        </div>

        <div class="form-group row">
            <label for="userId" class="col-sm-2 col-form-label">
                User Id
            </label>
            <div class="col-sm-10">
                <InputText id="userId" class="form-control" placeholder="User Id" @bind-Value="UserIdToSend" />
                <ValidationMessage For="@(() => UserIdToSend)" />
            </div>
        </div>

        <input type="submit" value="Submit" />
    </EditForm>
</p>

@if (bankAccounts == null)
{
    <p><em>Loading cards...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Balance</th>
                <th>Account Type</th>
                <th>User Id</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bankAccount in bankAccounts)
            {
                <tr>
                    <td>@bankAccount.Balance</td>
                    <td>@bankAccount.AccountType</td>
                    <td>@bankAccount.UserId</td>
                </tr>
            }
        </tbody>
    </table>
    <p>Message: @message</p>
}


@code{
    private List<BankAccount> bankAccounts;

    string message = "---";

    private BankAccount bankAccount = new BankAccount();

    private HashSet<string> accountTypes = new HashSet<string>();

    [Required]
    public string BalanceToSend { get; set; }

    [Required]
    public string UserIdToSend { get; set; }

    private bool IsShown { get; set; } = true;

    HttpClient httpClient = new HttpClient()
    {
        BaseAddress = new Uri("http://localhost:5000")
    };

    private void ShowForm()
    {
        IsShown = !IsShown;
    }

    protected async Task<string> GenerateId(int length)
    {
        string cypher = "123456789";

        var random = new Random();

        string generatedId = "";

        for (int i = 0; i < length; i++)
        {
            generatedId += cypher[random.Next(cypher.Length)];
        }

        return generatedId;
    }

    protected async Task Create()
    {
        bankAccount.Balance = Double.Parse(BalanceToSend);
        bankAccount.UserId = Int32.Parse(UserIdToSend);
        bankAccount.Id = await GenerateId(16);
        message = JsonSerializer.Serialize(bankAccount);

        await httpClient.PostAsJsonAsync<BankAccount>("/api/bankaccounts", bankAccount);
        bankAccounts = await httpClient.GetFromJsonAsync<List<BankAccount>>("/api/bankaccounts");
    }

    protected override async Task OnInitializedAsync()
    {
        bankAccounts = await httpClient.GetFromJsonAsync<List<BankAccount>>("/api/bankaccounts");
        foreach(var bankAccount in bankAccounts)
        {
            accountTypes.Add(bankAccount.AccountType);
        }
    }

}
