@page "/createcard"
@layout CardLayout
@using BlazorPaymentManagementApp.Model
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@using System.Timers
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/css/all.min.css">

<div class="register-photo">
    <div class="form-container">
        <div class="image-holder"></div>
        <form method="post">
            <EditForm Model="@card" OnValidSubmit="Create">
                <DataAnnotationsValidator />

                <h2 class="text-center"><strong>Create Card </strong> </h2>

                <div class="form-group">
                    <InputText id="number" class="form-control" placeholder="Number" @bind-Value="card.Number" />
                    <ValidationMessage For="@(() => card.Number)" />
                </div>

                <div class="form-group">
                    <InputDate id="expirationDate" class="form-control" @bind-Value="card.ExpirationDate" />
                    <ValidationMessage For="@(() => card.ExpirationDate)" />
                </div>

                <div class="form-group" style="display:inline-flex">
                    <InputText type=@showType id="pinCode" class="form-control" placeholder="PIN Code" @bind-Value="card.PinCode" />
                </div>

                <i class="far fa-eye" @onclick="() => showPin()"></i>
                <ValidationMessage For="@(() => card.PinCode)" />


                <div class="form-group" style="display:inline-flex">
                    <InputText type=@showType2 id="cvvCode" class="form-control" placeholder="CVV Code" @bind-Value="card.CvvCode" />
                </div>

                <i class="far fa-eye" @onclick="() => showCvv()"></i>
                <ValidationMessage For="@(() => card.CvvCode)" />

                <div class="form-group">
                    <InputSelect @onclick="getBankId" id="bankName" class="form-control" DisplayName="Bank Name" @bind-Value="card.bankNameToSend">
                        <option>BankName</option>
                        @foreach (var bankName in bankNames)
                        {
                            <option>@bankName</option>}
                    </InputSelect>
                    <ValidationMessage For="@(() => card.bankNameToSend)" />
                </div>

                <div class="form-group">
                    <InputSelect id="bankId" class="form-control" DisplayName="Bank Id" @bind-Value="card.bankIdToSend">
                        <option>BankAccountId</option>
                        @foreach (var bankId in bankIds)
                        {
                            <option>@bankId</option>}
                    </InputSelect>
                    <ValidationMessage For="@(() => card.bankIdToSend)" />
                </div>

                <div class="form-group">
                    <input class="btn btn-success btn-block" type="submit" value="Submit" />
                </div>
            </EditForm>
        </form>
    </div>
    <h3>@goodMessage</h3>
    <h4>@badMessage</h4>
</div>



@code{ private Card card = new Card();

    private User user = new User();

    private string goodMessage = "";
    private string badMessage = "";

    private string showType = "password";
    private string showType2 = "password";

    private static Timer aTimer;

    private List<string> bankNames = new List<string>();

    private List<string> bankIds = new List<string>();

    HttpClient httpClient = new HttpClient()
    {
        BaseAddress = new Uri("http://localhost:5000")
    };

    private void showPin()
    {
        if (showType == "password")
        {
            showType = "text";
        }
        else if (showType == "text")
        {
            showType = "password";
        }
    }

    private void showCvv()
    {
        if (showType2 == "password")
        {
            showType2 = "text";
        }
        else if (showType2 == "text")
        {
            showType2 = "password";
        }
    }

    protected void getBankId()
    {
        bankIds.Clear();
        foreach (BankAccount bankAccount in user.BankAccounts)
        {
            if (bankAccount.BankName == card.bankNameToSend && !bankIds.Contains(bankAccount.Id))
            {
                bankIds.Add(bankAccount.Id);
            }
        }
    }

    protected async Task Create()
    {
        card.BankName = card.bankNameToSend;
        card.BankAccountId = card.bankIdToSend;
        HttpResponseMessage response = await httpClient.PostAsJsonAsync<Card>("/api/v1/cards", card);

        if (response.StatusCode.ToString() == "Created")
        {
            badMessage = "";
            goodMessage = "";
            goodMessage += " Credit card added successfully, you will be redirected to your profile in 3 seconds... ";

            aTimer = new Timer();
            aTimer.Interval = 3000;
            aTimer.Elapsed += (sender, args) =>
            {
                NavManager.NavigateTo("users/" + card.OwnerId, true);
            };

            aTimer.AutoReset = true;
            aTimer.Enabled = true;

        }
        else
        {
            badMessage = "";
            badMessage += "Something is wrong, try again! ";
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var id = await localStorage.GetItemAsync<string>("id");
        user = await httpClient.GetFromJsonAsync<User>("/api/v1/users/" + id);

        foreach (BankAccount bankAccount in user.BankAccounts)
        {
            if (!bankNames.Contains(bankAccount.BankName))
            {
                bankNames.Add(bankAccount.BankName);
            }
        }

        card.OwnerId = id;

    } }