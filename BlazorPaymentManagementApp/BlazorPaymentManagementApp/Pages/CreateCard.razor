
@page "/createcard"
@layout CardLayout
@using BlazorPaymentManagementApp.Model
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage




<div class="register-photo">
    <div class="form-container">
        <div class="image-holder"></div>
        <form method="post">
            <EditForm Model="@card" OnValidSubmit="Create">
                <DataAnnotationsValidator />

                <h2 class="text-center"><strong>Create Card </strong> </h2>


                <div class="form-group">
                    <InputText id="number" class="form-control" placeholder="Number" @bind-Value="card.Number" />
                    <ValidationMessage For="@(() => card.Number)" />
                </div>

                <div class="form-group">
                    <InputDate id="expirationDate" class="form-control" @bind-Value="card.ExpirationDate" />
                    <ValidationMessage For="@(() => card.ExpirationDate)" />
                </div>

                <div class="form-group">
                    <InputText type="password" id="pinCode" class="form-control" placeholder="PIN Code" @bind-Value="card.PinCode" />
                    <ValidationMessage For="@(() => card.PinCode)" />
                </div>


                <div class="form-group">
                    <InputText type="password" id="cvvCode" class="form-control" placeholder="CVV Code" @bind-Value="card.CvvCode" />
                    <ValidationMessage For="@(() => card.CvvCode)" />
                </div>


                <div class="form-group">
                    <InputSelect @onclick="getBankId" id="bankName" class="form-control" DisplayName="Bank Name" @bind-Value="card.bankNameToSend">
                        <option>BankName</option>
                        @foreach (var bankName in bankNames)
                        {
    <option>@bankName</option>}
                    </InputSelect>
                    <ValidationMessage For="@(() => card.bankNameToSend)" />
                </div>

                <div class="form-group">
                    <InputSelect id="bankId" class="form-control" DisplayName="Bank Id" @bind-Value="card.bankIdToSend">
                        <option>BankAccountId</option>
                        @foreach (var bankId in bankIds)
                        {
    <option>@bankId</option>}
                    </InputSelect>
                    <ValidationMessage For="@(() => card.bankIdToSend)" />
                </div>

                <div class="form-group">
                    <input class="btn btn-success btn-block" type="submit" value="Submit" /><h5>@message2</h5><h4>@message</h4>

                </div>


            </EditForm>
        </form>
    </div>
</div>


@code{ private Card card = new Card();

    private User user = new User();

    private string message = "";
    private string message2 = "";

    private List<string> bankNames = new List<string>();

    private List<string> bankIds = new List<string>();

    private bool showInput { get; set; } = true;

    HttpClient httpClient = new HttpClient()
    {
        BaseAddress = new Uri("http://localhost:5000")
    };

    protected void getBankId()
    {
        // ??? Nu iti gasesti banca in lista? ADAUGA O NOUA BANCA!

        bankIds.Clear();
        foreach (BankAccount bankAccount in user.BankAccounts)
        {
            if (bankAccount.BankName == card.bankNameToSend && !bankIds.Contains(bankAccount.Id))
            {
                bankIds.Add(bankAccount.Id);
            }
        }
    }

    protected async Task Create()
    {
        Console.WriteLine("bankname: " + card.bankNameToSend);
        Console.WriteLine("bankid: " + card.bankIdToSend);

        //if (card.bankNameToSend == "BankName(Default: first account)")
        //{
        //    if (bankNames.Count != 0)
        //    {
        //        card.bankNameToSend = bankNames[0];
        //    }
        //    else
        //    {
        //        Console.WriteLine("No bank accounts!");
        //    }

        //}

        //if (card.bankIdToSend == "BankAccountId(Default: first account)")
        //{
        //    if (bankIds.Count != 0)
        //    {
        //        card.bankIdToSend = bankIds[0];
        //    }
        //    else
        //    {
        //        Console.WriteLine("No bank ids!");
        //    }
        //}




        //if (bankNameToSend != "Bank Name" && bankIdToSend != "Bank Account Id")
        //{
        card.BankName = card.bankNameToSend;
        card.BankAccountId = card.bankIdToSend;
        HttpResponseMessage response = await httpClient.PostAsJsonAsync<Card>("/api/v1/cards", card);

        if (response.StatusCode.ToString() == "Created")
        {
            message = "";
            message2 = "";
            message2 += " Credit card added successfully ! ";

        }
        else
        {
            message = "";
            message += "Something is wrong,try again ! ";
        }

        //TIMER!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        NavManager.NavigateTo("users/" + card.OwnerId);
        //}
    }

    protected override async Task OnInitializedAsync()
    {
        var id = await localStorage.GetItemAsync<string>("id");
        user = await httpClient.GetFromJsonAsync<User>("/api/v1/users/" + id);



        foreach (BankAccount bankAccount in user.BankAccounts)
        {
            if (!bankNames.Contains(bankAccount.BankName))
            {
                bankNames.Add(bankAccount.BankName);
            }
        }



        card.OwnerId = id;

    } }