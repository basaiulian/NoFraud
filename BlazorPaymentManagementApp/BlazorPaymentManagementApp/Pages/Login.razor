@page "/login"
@using BlazorPaymentManagementApp.Model
@using System.Text.Json
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using System.Timers
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<h3>Login</h3>
@*<form action="/user/@IdToFind">Blazored.LocalStorage.ILocalStorageService localStorage
        <input @bind="@IdToFind" />
        <input type="submit" value="Search" />
    </form>*@


<EditForm Model="@user" OnValidSubmit="LoginUser">
    <DataAnnotationsValidator />
    <hr />

    <div class="form-group row">
        <label for="username" class="col-sm-2 col-form-label">
            Username
        </label>
        <div class="col-sm-10">
            <InputText id="balance" class="form-control" placeholder="Username" @bind-Value="user.Username" />
            <ValidationMessage For="@(() => user.Username)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="password" class="col-sm-2 col-form-label">
            Password
        </label>
        <div class="col-sm-10">
            <InputText id="password" class="form-control" placeholder="Password" @bind-Value="user.Password" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>
    </div>
    <hr />

    <input type="submit" value="Submit" />
</EditForm>




@code{
    private List<User> users;

    private static Timer aTimer;

    private User user = new User();

    private string username { get; set; }
    private string password { get; set; }

    HttpClient httpClient = new HttpClient()
    {
        BaseAddress = new Uri("http://localhost:5000")
    };

    protected async Task LoginUser()
    {
        //LoginClass loginObject = new LoginClass(username, password);

        username = user.Username;
        password = user.Password;

        List<string> my_request = new List<string> { username, password };

        var raspuns = await httpClient.PostAsJsonAsync<List<string>>("/api/users/find", my_request);
        string returnValue = await raspuns.Content.ReadAsStringAsync();
        if (returnValue != "-1")
        {
            await localStorage.SetItemAsync("autentificat", "1");
            await localStorage.SetItemAsync("id", returnValue);

            aTimer = new System.Timers.Timer();
            aTimer.Interval = 1000;

            // Hook up the Elapsed event for the timer. 
            aTimer.Elapsed += (sender, args) =>
            {
                NavManager.NavigateTo("/users/" + returnValue, true);
            };

            // Have the timer fire repeated events (true is the default)
            aTimer.AutoReset = true;

            // Start the timer
            aTimer.Enabled = true;

        }


    }



    protected override async Task OnInitializedAsync()
    {

        users = await httpClient.GetFromJsonAsync<List<User>>("/api/users");

    }

    public class LoginClass
    {
        private string Username { get; set; }
        private string Password { get; set; }

        public LoginClass(string _username, string _password)
        {
            this.Username = _username;
            this.Password = _password;
        }
    }
}
